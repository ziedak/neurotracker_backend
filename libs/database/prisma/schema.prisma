// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Example models for cart recovery system
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions UserSession[]
  events   UserEvent[]
  carts    Cart[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?

  // Relations
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  events UserEvent[]

  @@map("user_sessions")
}

model UserEvent {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String?
  eventType   String
  timestamp   DateTime @default(now())
  metadata    Json?
  pageUrl     String?
  userAgent   String?
  ipAddress   String?

  // Relations
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session UserSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@map("user_events")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  currency    String   @default("USD")
  sku         String?  @unique
  imageUrl    String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems CartItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  status    CartStatus @default(ACTIVE)
  total     Decimal    @default(0)
  currency  String     @default("USD")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
  EXPIRED
}
