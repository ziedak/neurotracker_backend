/* eslint-disable @typescript-eslint/ban-ts-comment */
//! Do not edit this file manually, it is generate by `prisma repo generator`

import {
  PrismaClient,
  Prisma,
  Store,
  StoreSettings,
  RecoveryEvent,
  Report,
  SessionActivity,
  Webhook,
  Role,
  RolePermission,
  User,
  UserSession,
  SessionLog,
  UserEvent,
  Product,
  Cart,
  Order,
  OrderItem,
  Payment,
  CartItem,
  Feature,
  Notification,
  Config,
  QualityValidation,
  QualityAnomaly,
  ReconciliationRule,
  ReconciliationExecution,
  RepairOperation,
  ApiKey,
} from "@prisma/client";
import _ from "lodash";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type AnyRecord = Record<string, any>;

export type BaseOption<Include, Select> = {
  include?: Include;
  select?: Select;
};

export type Find<Select, Include, Cursor, Order, Distinct> = BaseOption<
  Include,
  Select
> & {
  cursor?: Cursor;
  take?: number;
  skip?: number;
  orderBy?: Prisma.Enumerable<Order>;
  distinct?: Distinct;
};

export type CountArgs<Select, Cursor, Order, Distinct> = Omit<
  Find<Select, never, Cursor, Order, Distinct>,
  "include"
>;

export type Aggregate<Cursor, Order, Distinct> = Omit<
  CountArgs<never, Cursor, Order, Distinct>,
  "select" | "distinct"
>;

export const prisma = new PrismaClient({
  log: ["error", "info", "query", "warn"],
});

export const models = _.omit(prisma, [
  "$on",
  "$connect",
  "$disconnect",
  "$use",
  "$executeRaw",
  "$executeRawUnsafe",
  "$queryRaw",
  "$queryRawUnsafe",
  "$transaction",
]);

export const MODELS_NAME = {
  STORE: "store",
  STORE_SETTINGS: "storeSettings",
  RECOVERY_EVENT: "recoveryEvent",
  REPORT: "report",
  SESSION_ACTIVITY: "sessionActivity",
  WEBHOOK: "webhook",
  ROLE: "role",
  ROLE_PERMISSION: "rolePermission",
  USER: "user",
  USER_SESSION: "userSession",
  SESSION_LOG: "sessionLog",
  USER_EVENT: "userEvent",
  PRODUCT: "product",
  CART: "cart",
  ORDER: "order",
  ORDER_ITEM: "orderItem",
  PAYMENT: "payment",
  CART_ITEM: "cartItem",
  FEATURE: "feature",
  NOTIFICATION: "notification",
  CONFIG: "config",
  QUALITY_VALIDATION: "qualityValidation",
  QUALITY_ANOMALY: "qualityAnomaly",
  RECONCILIATION_RULE: "reconciliationRule",
  RECONCILIATION_EXECUTION: "reconciliationExecution",
  REPAIR_OPERATION: "repairOperation",
  API_KEY: "apiKey",
} as const;

// eslint-disable-next-line @typescript-eslint/ban-types
export type ModelStructure = {
  store: Store;
  storeSettings: StoreSettings;
  recoveryEvent: RecoveryEvent;
  report: Report;
  sessionActivity: SessionActivity;
  webhook: Webhook;
  role: Role;
  rolePermission: RolePermission;
  user: User;
  userSession: UserSession;
  sessionLog: SessionLog;
  userEvent: UserEvent;
  product: Product;
  cart: Cart;
  order: Order;
  orderItem: OrderItem;
  payment: Payment;
  cartItem: CartItem;
  feature: Feature;
  notification: Notification;
  config: Config;
  qualityValidation: QualityValidation;
  qualityAnomaly: QualityAnomaly;
  reconciliationRule: ReconciliationRule;
  reconciliationExecution: ReconciliationExecution;
  repairOperation: RepairOperation;
  apiKey: ApiKey;
};

export type ModelName = keyof ModelStructure;

export type ModelScalarFields<T extends keyof ModelStructure> =
  Prisma.Enumerable<keyof ModelStructure[T]>;

export type ModelDelegate = any;

export type ModelTypes<T = unknown> = {
  store: {
    Where: Prisma.StoreWhereInput;
    Select: Prisma.StoreSelect;
    Include: unknown;
    Create: Prisma.StoreCreateInput | Prisma.StoreUncheckedCreateInput;
    Update: Prisma.StoreUpdateInput | Prisma.StoreUncheckedUpdateInput;
    Cursor: Prisma.StoreWhereUniqueInput;
    Order: Prisma.StoreOrderByWithRelationInput;
    Delegate: Prisma.StoreDelegate<ModelDelegate>;
    GroupBy: Prisma.StoreGroupByOutputType;
    // @ts-ignore
    Return: Prisma.StoreGetPayload<T>;
  };
  storeSettings: {
    Where: Prisma.StoreSettingsWhereInput;
    Select: Prisma.StoreSettingsSelect;
    Include: Prisma.StoreSettingsInclude;
    Create:
      | Prisma.StoreSettingsCreateInput
      | Prisma.StoreSettingsUncheckedCreateInput;
    Update:
      | Prisma.StoreSettingsUpdateInput
      | Prisma.StoreSettingsUncheckedUpdateInput;
    Cursor: Prisma.StoreSettingsWhereUniqueInput;
    Order: Prisma.StoreSettingsOrderByWithRelationInput;
    Delegate: Prisma.StoreSettingsDelegate<ModelDelegate>;
    GroupBy: Prisma.StoreSettingsGroupByOutputType;
    // @ts-ignore
    Return: Prisma.StoreSettingsGetPayload<T>;
  };
  recoveryEvent: {
    Where: Prisma.RecoveryEventWhereInput;
    Select: Prisma.RecoveryEventSelect;
    Include: Prisma.RecoveryEventInclude;
    Create:
      | Prisma.RecoveryEventCreateInput
      | Prisma.RecoveryEventUncheckedCreateInput;
    Update:
      | Prisma.RecoveryEventUpdateInput
      | Prisma.RecoveryEventUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.RecoveryEventOrderByWithRelationInput;
    Delegate: Prisma.RecoveryEventDelegate<ModelDelegate>;
    GroupBy: Prisma.RecoveryEventGroupByOutputType;
    // @ts-ignore
    Return: Prisma.RecoveryEventGetPayload<T>;
  };
  report: {
    Where: Prisma.ReportWhereInput;
    Select: Prisma.ReportSelect;
    Include: Prisma.ReportInclude;
    Create: Prisma.ReportCreateInput | Prisma.ReportUncheckedCreateInput;
    Update: Prisma.ReportUpdateInput | Prisma.ReportUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.ReportOrderByWithRelationInput;
    Delegate: Prisma.ReportDelegate<ModelDelegate>;
    GroupBy: Prisma.ReportGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ReportGetPayload<T>;
  };
  sessionActivity: {
    Where: Prisma.SessionActivityWhereInput;
    Select: Prisma.SessionActivitySelect;
    Include: Prisma.SessionActivityInclude;
    Create:
      | Prisma.SessionActivityCreateInput
      | Prisma.SessionActivityUncheckedCreateInput;
    Update:
      | Prisma.SessionActivityUpdateInput
      | Prisma.SessionActivityUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.SessionActivityOrderByWithRelationInput;
    Delegate: Prisma.SessionActivityDelegate<ModelDelegate>;
    GroupBy: Prisma.SessionActivityGroupByOutputType;
    // @ts-ignore
    Return: Prisma.SessionActivityGetPayload<T>;
  };
  webhook: {
    Where: Prisma.WebhookWhereInput;
    Select: Prisma.WebhookSelect;
    Include: Prisma.WebhookInclude;
    Create: Prisma.WebhookCreateInput | Prisma.WebhookUncheckedCreateInput;
    Update: Prisma.WebhookUpdateInput | Prisma.WebhookUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.WebhookOrderByWithRelationInput;
    Delegate: Prisma.WebhookDelegate<ModelDelegate>;
    GroupBy: Prisma.WebhookGroupByOutputType;
    // @ts-ignore
    Return: Prisma.WebhookGetPayload<T>;
  };
  role: {
    Where: Prisma.RoleWhereInput;
    Select: Prisma.RoleSelect;
    Include: Prisma.RoleInclude;
    Create: Prisma.RoleCreateInput | Prisma.RoleUncheckedCreateInput;
    Update: Prisma.RoleUpdateInput | Prisma.RoleUncheckedUpdateInput;
    Cursor: Prisma.RoleWhereUniqueInput;
    Order: Prisma.RoleOrderByWithRelationInput;
    Delegate: Prisma.RoleDelegate<ModelDelegate>;
    GroupBy: Prisma.RoleGroupByOutputType;
    // @ts-ignore
    Return: Prisma.RoleGetPayload<T>;
  };
  rolePermission: {
    Where: Prisma.RolePermissionWhereInput;
    Select: Prisma.RolePermissionSelect;
    Include: Prisma.RolePermissionInclude;
    Create:
      | Prisma.RolePermissionCreateInput
      | Prisma.RolePermissionUncheckedCreateInput;
    Update:
      | Prisma.RolePermissionUpdateInput
      | Prisma.RolePermissionUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.RolePermissionOrderByWithRelationInput;
    Delegate: Prisma.RolePermissionDelegate<ModelDelegate>;
    GroupBy: Prisma.RolePermissionGroupByOutputType;
    // @ts-ignore
    Return: Prisma.RolePermissionGetPayload<T>;
  };
  user: {
    Where: Prisma.UserWhereInput;
    Select: Prisma.UserSelect;
    Include: Prisma.UserInclude;
    Create: Prisma.UserCreateInput | Prisma.UserUncheckedCreateInput;
    Update: Prisma.UserUpdateInput | Prisma.UserUncheckedUpdateInput;
    Cursor: Prisma.UserWhereUniqueInput;
    Order: Prisma.UserOrderByWithRelationInput;
    Delegate: Prisma.UserDelegate<ModelDelegate>;
    GroupBy: Prisma.UserGroupByOutputType;
    // @ts-ignore
    Return: Prisma.UserGetPayload<T>;
  };
  userSession: {
    Where: Prisma.UserSessionWhereInput;
    Select: Prisma.UserSessionSelect;
    Include: Prisma.UserSessionInclude;
    Create:
      | Prisma.UserSessionCreateInput
      | Prisma.UserSessionUncheckedCreateInput;
    Update:
      | Prisma.UserSessionUpdateInput
      | Prisma.UserSessionUncheckedUpdateInput;
    Cursor: Prisma.UserSessionWhereUniqueInput;
    Order: Prisma.UserSessionOrderByWithRelationInput;
    Delegate: Prisma.UserSessionDelegate<ModelDelegate>;
    GroupBy: Prisma.UserSessionGroupByOutputType;
    // @ts-ignore
    Return: Prisma.UserSessionGetPayload<T>;
  };
  sessionLog: {
    Where: Prisma.SessionLogWhereInput;
    Select: Prisma.SessionLogSelect;
    Include: Prisma.SessionLogInclude;
    Create:
      | Prisma.SessionLogCreateInput
      | Prisma.SessionLogUncheckedCreateInput;
    Update:
      | Prisma.SessionLogUpdateInput
      | Prisma.SessionLogUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.SessionLogOrderByWithRelationInput;
    Delegate: Prisma.SessionLogDelegate<ModelDelegate>;
    GroupBy: Prisma.SessionLogGroupByOutputType;
    // @ts-ignore
    Return: Prisma.SessionLogGetPayload<T>;
  };
  userEvent: {
    Where: Prisma.UserEventWhereInput;
    Select: Prisma.UserEventSelect;
    Include: Prisma.UserEventInclude;
    Create: Prisma.UserEventCreateInput | Prisma.UserEventUncheckedCreateInput;
    Update: Prisma.UserEventUpdateInput | Prisma.UserEventUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.UserEventOrderByWithRelationInput;
    Delegate: Prisma.UserEventDelegate<ModelDelegate>;
    GroupBy: Prisma.UserEventGroupByOutputType;
    // @ts-ignore
    Return: Prisma.UserEventGetPayload<T>;
  };
  product: {
    Where: Prisma.ProductWhereInput;
    Select: Prisma.ProductSelect;
    Include: unknown;
    Create: Prisma.ProductCreateInput | Prisma.ProductUncheckedCreateInput;
    Update: Prisma.ProductUpdateInput | Prisma.ProductUncheckedUpdateInput;
    Cursor: Prisma.ProductWhereUniqueInput;
    Order: Prisma.ProductOrderByWithRelationInput;
    Delegate: Prisma.ProductDelegate<ModelDelegate>;
    GroupBy: Prisma.ProductGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ProductGetPayload<T>;
  };
  cart: {
    Where: Prisma.CartWhereInput;
    Select: Prisma.CartSelect;
    Include: Prisma.CartInclude;
    Create: Prisma.CartCreateInput | Prisma.CartUncheckedCreateInput;
    Update: Prisma.CartUpdateInput | Prisma.CartUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.CartOrderByWithRelationInput;
    Delegate: Prisma.CartDelegate<ModelDelegate>;
    GroupBy: Prisma.CartGroupByOutputType;
    // @ts-ignore
    Return: Prisma.CartGetPayload<T>;
  };
  order: {
    Where: Prisma.OrderWhereInput;
    Select: Prisma.OrderSelect;
    Include: Prisma.OrderInclude;
    Create: Prisma.OrderCreateInput | Prisma.OrderUncheckedCreateInput;
    Update: Prisma.OrderUpdateInput | Prisma.OrderUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.OrderOrderByWithRelationInput;
    Delegate: Prisma.OrderDelegate<ModelDelegate>;
    GroupBy: Prisma.OrderGroupByOutputType;
    // @ts-ignore
    Return: Prisma.OrderGetPayload<T>;
  };
  orderItem: {
    Where: Prisma.OrderItemWhereInput;
    Select: Prisma.OrderItemSelect;
    Include: Prisma.OrderItemInclude;
    Create: Prisma.OrderItemCreateInput | Prisma.OrderItemUncheckedCreateInput;
    Update: Prisma.OrderItemUpdateInput | Prisma.OrderItemUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.OrderItemOrderByWithRelationInput;
    Delegate: Prisma.OrderItemDelegate<ModelDelegate>;
    GroupBy: Prisma.OrderItemGroupByOutputType;
    // @ts-ignore
    Return: Prisma.OrderItemGetPayload<T>;
  };
  payment: {
    Where: Prisma.PaymentWhereInput;
    Select: Prisma.PaymentSelect;
    Include: Prisma.PaymentInclude;
    Create: Prisma.PaymentCreateInput | Prisma.PaymentUncheckedCreateInput;
    Update: Prisma.PaymentUpdateInput | Prisma.PaymentUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.PaymentOrderByWithRelationInput;
    Delegate: Prisma.PaymentDelegate<ModelDelegate>;
    GroupBy: Prisma.PaymentGroupByOutputType;
    // @ts-ignore
    Return: Prisma.PaymentGetPayload<T>;
  };
  cartItem: {
    Where: Prisma.CartItemWhereInput;
    Select: Prisma.CartItemSelect;
    Include: Prisma.CartItemInclude;
    Create: Prisma.CartItemCreateInput | Prisma.CartItemUncheckedCreateInput;
    Update: Prisma.CartItemUpdateInput | Prisma.CartItemUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.CartItemOrderByWithRelationInput;
    Delegate: Prisma.CartItemDelegate<ModelDelegate>;
    GroupBy: Prisma.CartItemGroupByOutputType;
    // @ts-ignore
    Return: Prisma.CartItemGetPayload<T>;
  };
  feature: {
    Where: Prisma.FeatureWhereInput;
    Select: Prisma.FeatureSelect;
    Include: Prisma.FeatureInclude;
    Create: Prisma.FeatureCreateInput | Prisma.FeatureUncheckedCreateInput;
    Update: Prisma.FeatureUpdateInput | Prisma.FeatureUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.FeatureOrderByWithRelationInput;
    Delegate: Prisma.FeatureDelegate<ModelDelegate>;
    GroupBy: Prisma.FeatureGroupByOutputType;
    // @ts-ignore
    Return: Prisma.FeatureGetPayload<T>;
  };
  notification: {
    Where: Prisma.NotificationWhereInput;
    Select: Prisma.NotificationSelect;
    Include: Prisma.NotificationInclude;
    Create:
      | Prisma.NotificationCreateInput
      | Prisma.NotificationUncheckedCreateInput;
    Update:
      | Prisma.NotificationUpdateInput
      | Prisma.NotificationUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.NotificationOrderByWithRelationInput;
    Delegate: Prisma.NotificationDelegate<ModelDelegate>;
    GroupBy: Prisma.NotificationGroupByOutputType;
    // @ts-ignore
    Return: Prisma.NotificationGetPayload<T>;
  };
  config: {
    Where: Prisma.ConfigWhereInput;
    Select: Prisma.ConfigSelect;
    Include: unknown;
    Create: Prisma.ConfigCreateInput | Prisma.ConfigUncheckedCreateInput;
    Update: Prisma.ConfigUpdateInput | Prisma.ConfigUncheckedUpdateInput;
    Cursor: Prisma.ConfigWhereUniqueInput;
    Order: Prisma.ConfigOrderByWithRelationInput;
    Delegate: Prisma.ConfigDelegate<ModelDelegate>;
    GroupBy: Prisma.ConfigGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ConfigGetPayload<T>;
  };
  qualityValidation: {
    Where: Prisma.QualityValidationWhereInput;
    Select: Prisma.QualityValidationSelect;
    Include: unknown;
    Create:
      | Prisma.QualityValidationCreateInput
      | Prisma.QualityValidationUncheckedCreateInput;
    Update:
      | Prisma.QualityValidationUpdateInput
      | Prisma.QualityValidationUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.QualityValidationOrderByWithRelationInput;
    Delegate: Prisma.QualityValidationDelegate<ModelDelegate>;
    GroupBy: Prisma.QualityValidationGroupByOutputType;
    // @ts-ignore
    Return: Prisma.QualityValidationGetPayload<T>;
  };
  qualityAnomaly: {
    Where: Prisma.QualityAnomalyWhereInput;
    Select: Prisma.QualityAnomalySelect;
    Include: unknown;
    Create:
      | Prisma.QualityAnomalyCreateInput
      | Prisma.QualityAnomalyUncheckedCreateInput;
    Update:
      | Prisma.QualityAnomalyUpdateInput
      | Prisma.QualityAnomalyUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.QualityAnomalyOrderByWithRelationInput;
    Delegate: Prisma.QualityAnomalyDelegate<ModelDelegate>;
    GroupBy: Prisma.QualityAnomalyGroupByOutputType;
    // @ts-ignore
    Return: Prisma.QualityAnomalyGetPayload<T>;
  };
  reconciliationRule: {
    Where: Prisma.ReconciliationRuleWhereInput;
    Select: Prisma.ReconciliationRuleSelect;
    Include: unknown;
    Create:
      | Prisma.ReconciliationRuleCreateInput
      | Prisma.ReconciliationRuleUncheckedCreateInput;
    Update:
      | Prisma.ReconciliationRuleUpdateInput
      | Prisma.ReconciliationRuleUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.ReconciliationRuleOrderByWithRelationInput;
    Delegate: Prisma.ReconciliationRuleDelegate<ModelDelegate>;
    GroupBy: Prisma.ReconciliationRuleGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ReconciliationRuleGetPayload<T>;
  };
  reconciliationExecution: {
    Where: Prisma.ReconciliationExecutionWhereInput;
    Select: Prisma.ReconciliationExecutionSelect;
    Include: Prisma.ReconciliationExecutionInclude;
    Create:
      | Prisma.ReconciliationExecutionCreateInput
      | Prisma.ReconciliationExecutionUncheckedCreateInput;
    Update:
      | Prisma.ReconciliationExecutionUpdateInput
      | Prisma.ReconciliationExecutionUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.ReconciliationExecutionOrderByWithRelationInput;
    Delegate: Prisma.ReconciliationExecutionDelegate<ModelDelegate>;
    GroupBy: Prisma.ReconciliationExecutionGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ReconciliationExecutionGetPayload<T>;
  };
  repairOperation: {
    Where: Prisma.RepairOperationWhereInput;
    Select: Prisma.RepairOperationSelect;
    Include: unknown;
    Create:
      | Prisma.RepairOperationCreateInput
      | Prisma.RepairOperationUncheckedCreateInput;
    Update:
      | Prisma.RepairOperationUpdateInput
      | Prisma.RepairOperationUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.RepairOperationOrderByWithRelationInput;
    Delegate: Prisma.RepairOperationDelegate<ModelDelegate>;
    GroupBy: Prisma.RepairOperationGroupByOutputType;
    // @ts-ignore
    Return: Prisma.RepairOperationGetPayload<T>;
  };
  apiKey: {
    Where: Prisma.ApiKeyWhereInput;
    Select: Prisma.ApiKeySelect;
    Include: Prisma.ApiKeyInclude;
    Create: Prisma.ApiKeyCreateInput | Prisma.ApiKeyUncheckedCreateInput;
    Update: Prisma.ApiKeyUpdateInput | Prisma.ApiKeyUncheckedUpdateInput;
    Cursor: Prisma.ApiKeyWhereUniqueInput;
    Order: Prisma.ApiKeyOrderByWithRelationInput;
    Delegate: Prisma.ApiKeyDelegate<ModelDelegate>;
    GroupBy: Prisma.ApiKeyGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ApiKeyGetPayload<T>;
  };
};
